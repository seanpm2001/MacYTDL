-- You MUST update the version number in "Version.txt" so that MacYTDL will update the Service if it is installed.-- Get URL of video user wants to download from copied or selected text in active app or web browser tab - send URL to MacYTDL-- 1st save any data in Clipboard-- 2nd check whether any text is selected - if so, parse for link. If link, send to MacYTDL-- 3rd if no link is selected, check whether user has web browser open to a web page. If so, send link to MacYTDL.-- 4th if no link in web browser check the previously saved data from Clipboard. If link found, send to MacYTDL-- If no link is found in browser, Clipboard or selection, warn user-- Check whether user has turned on auto-downloads -- use script "DialogToolkitMacYTDL"use scripting additionsglobal video_URLglobal app_name_shortglobal data_selectedset video_URL to ""set data_copied to ""set data_selected to ""set app_name_short to short name of (info for (path to frontmost application))set MacYTDL_preferences_folder to "Library/Preferences/MacYTDL/"set MacYTDL_preferences_path to (POSIX path of (path to home folder) & MacYTDL_preferences_folder)set MacYTDL_prefs_file to MacYTDL_preferences_path & "MacYTDL.plist"-- Save any data currently in Clipboardtry	set data_copied to the clipboardend try-- Check whether any text has been selected in current appcopy_selection()-- If text has been selected, parse for URLif data_selected is not "" then	parse_selection(data_selected)	set the clipboard to ""end if-- If no URL selected, get URL of current browser tab if frontmostif video_URL is "" then	get_URL_from_browser()	if video_URL is missing value then set video_URL to ""end if-- If no URL selected or in browser, parse saved Clipboard data for URLif video_URL is "" then	parse_selection(data_copied)	set the clipboard to ""end if-- Send any URL to MacYTDL or start auto downloadif video_URL is not "" then	tell application "System Events"		tell property list file MacYTDL_prefs_file			set DL_auto_download to value of property list item "Auto_Download"		end tell	end tell	if DL_auto_download is false then		send_URL()	else		-- Pass video_URL to auto download code inside MacYTDL bundle		tell application "Finder"			set appPath to (application file id "com.apple.script.id.MacYTDL" as string)		end tell		set path_to_Utilities to (appPath & ":Contents:Resources:Scripts:Utilities.scpt")  as alias -- <= Comment out to enable testing using the following line		set run_Utilities_handlers to load script path_to_Utilities		run_Utilities_handlers's auto_Download(MacYTDL_prefs_file, video_URL, appPath)		set run_Utilities_handlers to ""	end ifelse	tell application "Finder"		set appPath to (application file id "com.apple.script.id.MacYTDL" as string)	end tell	set icon_Path to (appPath & ":Contents:Resources:MacYTDL.icns") as string	display dialog "To use MacYTDL, select a URL or switch to your web browser." buttons {"OK"} with icon file icon_Path default button 1 giving up after 10end if-- Has user selected any texton copy_selection()	set the clipboard to ""	tell application app_name_short		tell application "System Events"			keystroke "c" using command down		end tell	end tell	delay 0.5	try		set data_selected to the clipboard	end tryend copy_selectionon parse_selection(data_selected)	-- Set delimiters for distinguishing URLs - it's a WIP as some of these are valid inside a URL but, hopefully rare	set AppleScript's text item delimiters to {" ", "	", "", "", ",", "\"", "”", "“", "’", "‘"}	-- Parse selection - if URL, send to MacYTDL - Assume all links are =/< 8 characters + address contains one of the TLDs or http or www	if data_selected is not "" then		repeat with text_item in text items of data_selected			if length of text_item is greater than 8 then				if text_item contains ".com" or text_item contains ".org" or text_item contains ".net" or text_item contains ".mil" or text_item contains ".info" or text_item contains ".gov" or text_item contains ".edu" or text_item contains ".int" or text_item contains "gov." or text_item contains ".co." or text 1 thru 4 of text_item is "http" or text 1 thru 4 of text_item is "www" then					set video_URL to text_item as text					exit repeat				end if			end if		end repeat	end if	set AppleScript's text item delimiters to ""end parse_selection-- If no URL copied or selected, test whether user has a browser active - if so, get URL of current tab - warn if no window openon get_URL_from_browser()	try		if app_name_short is "Safari" then			using terms from application "Safari"				tell application "Safari"					set video_URL to URL of current tab of first window				end tell			end using terms from		else if app_name_short is "Firefox" then			tell application app_name_short to activate			tell application "System Events"				keystroke "l" using command down				delay 0.5				keystroke "c" using command down				delay 0.5				key code 53			end tell			delay 0.5			set video_URL to the clipboard		else if app_name_short is "Opera" then			tell application app_name_short				set video_URL to URL of front document as string			end tell		else if app_name_short is "Chrome" then			try				set video_URL to run script "tell application \"Chrome\"return URL of active tab of front windowend tell"			end try		else if app_name_short is "Brave" then			try				set video_URL to run script "tell application \"Brave\"return URL of active tab of front windowend tell"			end try		else if app_name_short is "Edge" then			set app_name_short to "Microsoft Edge"			try				set video_URL to run script "tell application \"Microsoft Edge\"return URL of active tab of front windowend tell"			end try		else if app_name_short is "Chromium" then			try				set video_URL to run script "tell application \"Chromium\"return URL of active tab of front windowend tell"			end try		end if	end try	end get_URL_from_browser-- If a URL has been found, send it to MacYTDLon send_URL()	-- Is MacYTDL running	set MacYTDL_app_ID to "com.apple.script.id.MacYTDL"	tell application "System Events"		set MacYTDL_running to ((bundle identifier of processes) contains MacYTDL_app_ID)	end tell		-- MacYTDL is not running - launch it and pass the URL to main dialog	if MacYTDL_running is false then		tell application id MacYTDL_app_ID			ignoring application responses				launch				called_by_service(video_URL)			end ignoring		end tell	end if		-- MacYTDL is running - bring MacYTDL to the front and set the URL - active app must not be in full screen	if MacYTDL_running is true then		tell application "System Events"			set MacYTDL_appName to name of first process whose bundle identifier is MacYTDL_app_ID			tell process app_name_short				try					tell front window						set value of attribute "AXFullScreen" to false					end tell				end try			end tell			delay 1			try				set value of text field 1 of window of process MacYTDL_appName to video_URL			on error				tell application "Finder"					set appPath to (application file id "com.apple.script.id.MacYTDL" as string)				end tell				set icon_Path to (appPath & ":Contents:Resources:applet.icns") as string				display dialog "Could not send the URL to MacYTDL. Perhaps you have a dialog left open ?" buttons {"OK"} default button 1 with icon file icon_Path giving up after 10			end try			tell process MacYTDL_appName				set visible to true				set frontmost to true			end tell		end tell	end ifend send_URL